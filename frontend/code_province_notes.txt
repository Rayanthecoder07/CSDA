old code:(ranking all)

import { useContext, useEffect, useState } from "react"
import { useParams } from "react-router-dom"
import IndicatorContext from "../../Data/IndicatorsData"


//display data by themes see miro
function Province() {
    const { geocode } = useParams()
    const { indicators ,data,themes} = useContext(IndicatorContext)
    const [provinceName, setProvinceName] = useState("")
    const [matchingIndicator, setMatchingIndicator] = useState(null);
    const [matchingIndicators, setMatchingIndicators] = useState([])
    const [loading, setLoading] = useState(true);
 
    const [ranking, setRanking] = useState([]);
    const [search, setSearch] = useState("")
    
    const getProvinceNameGeoCode = (geo_code) => {
        switch (Number(geo_code)) {
            case 1:
                return'Newfoundland and Labrador';
                break;
            case 2:
                return'Prince Edward Island';
                break;
            case 3:
                return'Nova Scotia';
                break;
            case 4:
                return'New Brunswick';
                break;
            case 5:
                return'Quebec';
                break;
            case 6:
                return'Ontario';
                break;
            case 7:
                return'Manitoba';
                break;
            case 8:
                return'Saskatchewan';
                break;
            case 9:
                return'Alberta';
                break;
            case 10:
                return'British Columbia';
                break;
            case 11:
                return'Yukon';
                break;
            case 12:
                return'Northwest Territories';
                break;
            case 13:
                return'Nunavut';
                break;
            default:
                return'Unknown'; // Default case for unknown geo_codes
        }
    }

    const searchData = () => {
        console.log(data)
        console.log(data.indicators)
        data.indicators.filter((indicator) => indicator.title.en.includes(search))
        console.log(indicators[geocode]     )
    }


  
    console.log(ranking)
    useEffect(() => {
    
        const matchingIndicatorsData = [];
        const codesToMatch = [9,41, 87]; // Add more codes if needed

        codesToMatch.forEach((code) => {
            const filteredIndicators = indicators[code].filter(item => item.geo_code !== 0);
            const indicatorsData = filteredIndicators.find(item => item.geo_code == Number(geocode));
        
            if (indicatorsData) {
                const sortedIndicators = [...filteredIndicators].sort((a, b) => {
                    const numericA = parseFloat(a.value.en.replace(/[^\d.]/g, ''));
                    const numericB = parseFloat(b.value.en.replace(/[^\d.]/g, ''));
                    
                    return numericB - numericA;
                });
        
                matchingIndicatorsData.push(indicatorsData);
                setRanking(prevRanking => [...prevRanking, sortedIndicators]); // Add the sortedIndicators to ranking
            }
        });
        if (matchingIndicatorsData.length > 0) {
            setMatchingIndicators(matchingIndicatorsData);
        }


          // Use a switch statement to determine the province/territory based on geo_code
    switch (Number(geocode)) {
        case 1:
            setProvinceName('Newfoundland and Labrador');
            break;
        case 2:
            setProvinceName('Prince Edward Island');
            break;
        case 3:
            setProvinceName('Nova Scotia');
            break;
        case 4:
            setProvinceName('New Brunswick');
            break;
        case 5:
            setProvinceName('Quebec');
            break;
        case 6:
            setProvinceName('Ontario');
            break;
        case 7:
            setProvinceName('Manitoba');
            break;
        case 8:
            setProvinceName('Saskatchewan');
            break;
        case 9:
            setProvinceName('Alberta');
            break;
        case 10:
            setProvinceName('British Columbia');
            break;
        case 11:
            setProvinceName('Yukon');
            break;
        case 12:
            setProvinceName('Northwest Territories');
            break;
        case 13:
            setProvinceName('Nunavut');
            break;
        default:
            setProvinceName('Unknown'); // Default case for unknown geo_codes
    }

 

    // Mark loading as complete
    setLoading(false);
    },[geocode,indicators])

    console.log(indicators)


    return (
        <div className="w-full">
            <p className="text-3xl">{provinceName}</p>
            <p>{themes[0].label}</p>
            <div className="m-2 flex flex-row gap-2">
            <input type="text" placeholder="Search data" className="input input-bordered w-full max-w-xs" onChange={(e) => setSearch(e.target.value)}/>
            <button  onClick={() => searchData()}>search</button>
            </div>
            {loading ? (
                <p className="text-3xl">Loading...</p>
            ) : matchingIndicators.length > 0 ? (
                <div className=" flex  flex-row flex-wrap">
                
                {matchingIndicators.map((matchingIndicator, index) => {
                   console.log(ranking[index])
                    return <div key={index} className="m-2">
                        <div className="card w-96 bg-base-100 shadow-xl p-2">
                            <p className="text-xl">{matchingIndicator.title.en}</p>
                            <p>value: {matchingIndicator.value.en}</p>
                            <p>
                                Source:{" "}
                                <a
                                    href={`https://www150.statcan.gc.ca/${matchingIndicator.daily_url.en}`}
                                    target="_blank"
                                >
                                    {matchingIndicator.title.en}
                                </a>
                            </p>
                            <p>Publication Date: {matchingIndicator.refper.en}</p>
    
                            <div className="overflow-x-auto">
                                <table className="table">
                                    <thead>
                                        <tr>
                                            <th>Rank</th>
                                            <th>Province Name</th>
                                            <th>Value</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {ranking[index].map((province, rankIndex) => (
                                            
                                            <tr
                                                key={province.geo_code}
                                                className={
                                                    geocode == Number(province.geo_code)
                                                        ? "bg-base-200"
                                                        : ""
                                                }
                                            >
                                                <td>{rankIndex + 1}</td>
                                                <td>{getProvinceNameGeoCode(province.geo_code)}</td>
                                                <td>{province.value.en}</td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                
            })}
            </div>
            ) : (
                <p className="text-3xl">No matching indicators found for geo code {geocode}</p>
            )}
        </div>
    );
    
}

export default Province
